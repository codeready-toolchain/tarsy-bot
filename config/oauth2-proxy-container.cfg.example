## OAuth2 Proxy Config File - Container Version
## https://github.com/oauth2-proxy/oauth2-proxy

## <addr>:<port> to listen on for HTTP/HTTPS clients  
http_address = "0.0.0.0:4180"
# https_address = ":443"

## Are we running behind a reverse proxy? Will not accept headers like X-Real-Ip unless this is set.
reverse_proxy = true

## TLS Settings
# tls_cert_file = ""
# tls_key_file = ""

## the OAuth Redirect URL.
# redirect_url = "https://{{ROUTE_HOST}}/oauth2/callback"  # OpenShift deployment: make openshift-deploy
redirect_url = "http://localhost:8080/oauth2/callback"     # Local containers: make containers-deploy

## the http url(s) of the upstream endpoint. If multiple, routing is based on path
# upstreams = ["http://localhost:8000"]  # OpenShift deployment (sidecar container)
upstreams = ["http://backend:8000"]      # Local containers (podman-compose)

# Protect Existing Endpoints
# - **Main.py endpoints**
#   - `POST /alerts` (alert submission)
#   - `GET /alert-types` (dev UI support)
#   - `GET /session-id/{alert_id}` (session lookup)
#   - `WebSocket /ws/dashboard/{user_id}` (dashboard WebSocket)
# - **History controller endpoints**
#   - `GET /api/v1/history/sessions` (list sessions)
#   - `GET /api/v1/history/sessions/{session_id}` (session details)
#   - `GET /api/v1/history/sessions/{session_id}/summary` (session summary)
#   - `GET /api/v1/history/active-sessions` (active sessions)
#   - `GET /api/v1/history/filter-options` (filter options)
# - **Unprotected endpoints**
#   - `GET /health` (main service health check for Kubernetes probes)

## Logging configuration
#logging_filename = ""
#logging_max_size = 100
#logging_max_age = 7
#logging_local_time = true
#logging_compress = false
#standard_logging = true
#standard_logging_format = "[{{.Timestamp}}] [{{.File}}] {{.Message}}"
#request_logging = true
#request_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
#auth_logging = true
#auth_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] [{{.Status}}] {{.Message}}"

## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream
# pass_basic_auth = true
pass_user_headers = true

## Prefer username over email in headers (GitHub username instead of email)
prefer_email_to_user = false
## pass the request Host Header to upstream
## when disabled the upstream Host is used as the Host Header
pass_host_header = true

## Custom headers for CORS support in development
set_xauthrequest = true
set_authorization_header = true

## CORS configuration for containerized development
## OAuth2-proxy doesn't have built-in CORS support, but we'll handle it in the backend
## For now, ensure OPTIONS requests are allowed
# Note: CORS headers need to be handled by the backend or a reverse proxy

## Allow redirects
# whitelist_domains = ["{{ROUTE_HOST}}"]           # OpenShift deployment
whitelist_domains = ["localhost:8080", "localhost"] # Local containers

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
# email_domains = [
#     "yourcompany.com"
# ]
email_domains=["*"]

## JWT Bearer Token Authentication
## Allow API clients to authenticate directly with JWT tokens
## while maintaining GitHub OAuth for web dashboard users
skip_jwt_bearer_tokens = true
oidc_jwks_url = "http://tarsy-backend:8000/.well-known/jwks.json"
skip_oidc_discovery = true

## Optional: Specify expected JWT issuer and audience for additional validation
extra_jwt_issuers = ["http://tarsy-backend:8000=tarsy-api"]

provider = "github"
## The OAuth Client ID, Secret
## Create GitHub OAuth App at: https://github.com/settings/developers
## Local: Homepage=http://localhost:8080, Callback=http://localhost:8080/oauth2/callback
## OpenShift: Homepage=https://{{ROUTE_HOST}}, Callback=https://{{ROUTE_HOST}}/oauth2/callback
client_id = "YOUR_GITHUB_OAUTH_CLIENT_ID"
client_secret = "YOUR_GITHUB_OAUTH_CLIENT_SECRET"

## Optional: Restrict to specific GitHub org/team (comment out to allow any GitHub user)
# github_org = "your-github-org"
# github_team = "your-team"

## Scopes Added to the request (needed if using github_org/github_team restriction)
scope = "user:email read:org"

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
# pass_access_token = false

## Authenticated Email Addresses File (one email per line)
# authenticated_emails_file = ""

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -B" for bcrypt encryption
## enabling exposes a username/login signin form
# htpasswd_file = ""

## bypass authentication for requests that match the method & path. Format: method=path_regex OR path_regex alone for all methods
# skip_auth_routes = [
#   "GET=^/probe",
#   "^/metrics"
# ]
skip_auth_routes = [
  "GET=^/health",
  "OPTIONS=.*"
]

## mark paths as API routes to get HTTP Status code 401 instead of redirect to login page
api_routes = [
  "^/api",
  "^/ws"
]

## Templates
## optional directory with custom sign_in.html and error.html
custom_templates_dir = "/templates"

## Custom sign-in logo
custom_sign_in_logo = "/templates/tarsy-logo.png"

## skip SSL checking for HTTPS requests
# ssl_insecure_skip_verify = false


## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
cookie_name = "_oauth2_proxy"
cookie_secret = "REPLACE_WITH_BASE64_32_BYTE_SECRET"  # Generate with: openssl rand -base64 32
# cookie_domains = ["{{ROUTE_HOST}}"]  # OpenShift deployment
cookie_domains = ["localhost"]         # Local containers
cookie_expire = "168h"
cookie_refresh = "0"
# cookie_secure = true   # OpenShift deployment (HTTPS)
cookie_secure = false    # Local containers (HTTP)
cookie_httponly = true
cookie_samesite = "lax"  # Required for modern browsers; use "lax" for OAuth flows

## Session storage configuration
## Store full session in cookie to avoid GitHub API validation on every request
## This may prevent session loss when pods restart
session_cookie_minimal = false

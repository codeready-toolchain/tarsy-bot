# Tarsy - Environment Configuration Template
# Copy this file to .env and fill in your actual values

# =============================================================================
# Application Settings
# =============================================================================
# LLM provider to use
# Built-in providers available out-of-the-box:
# - openai-default (gpt-5)
# - google-default (gemini-2.5-flash) [DEFAULT]
# - xai-default (grok-4-latest)  
# - anthropic-default (claude-4-sonnet)
LLM_PROVIDER=google-default

# =============================================================================
# LLM Provider Configuration
# =============================================================================
# Built-in providers available out-of-the-box:
# OOTB: Just set GOOGLE_API_KEY to use google-default (gemini-2.5-flash)
# Or override with LLM_PROVIDER:
# - openai-default (gpt-5)
# - google-default (gemini-2.5-flash) [DEFAULT]
# - xai-default (grok-4-latest)  
# - anthropic-default (claude-4-sonnet)

# OOTB setup - just set this and you're ready to go:
GOOGLE_API_KEY=your_google_api_key_here

# Optional: Override LLM provider
# LLM_PROVIDER=openai-default

# Optional: Path to custom LLM providers configuration file
# LLM_CONFIG_PATH=./config/llm_providers.yaml

# =============================================================================
# OPTIONAL: Additional LLM Provider API Keys
# =============================================================================
# Only set these if you want to use other providers or override the default

# OpenAI API Key  
# Get from: https://platform.openai.com/api-keys
# OPENAI_API_KEY=your_openai_api_key_here

# X.AI API Key (for Grok models)
# Get from: https://console.x.ai/
# XAI_API_KEY=your_xai_api_key_here

# Anthropic API Key (for Claude models)
# Get from: https://console.anthropic.com/
# ANTHROPIC_API_KEY=your_anthropic_api_key_here

# =============================================================================
# REQUIRED: GitHub Configuration
# =============================================================================
# Required for downloading runbooks from repositories
# Get from: https://github.com/settings/tokens
# Permissions needed: repo (for private repos) or public_repo (for public repos)
GITHUB_TOKEN=your_github_token_here

# =============================================================================
# AUTHENTICATION SYSTEM (EP-0017)
# =============================================================================
# JWT-based authentication with GitHub OAuth for web users
# and service account tokens for automation

# -----------------------------------------------------------------------------
# GitHub OAuth Configuration (REQUIRED for web authentication)
# -----------------------------------------------------------------------------
# Create OAuth App at: https://github.com/settings/applications/new
# Authorization callback URL: {BACKEND_URL}/auth/callback
# Required scopes: user:email, read:org

# GitHub OAuth App credentials
GITHUB_CLIENT_ID=your_github_oauth_client_id_here
GITHUB_CLIENT_SECRET=your_github_oauth_client_secret_here

# GitHub organization membership required for authentication
GITHUB_ORG=your-organization-name

# Optional: GitHub team membership required (within the org)
# If specified, users must be members of both org and team
# GITHUB_TEAM=allowed-team-name

# GitHub OAuth endpoints (customizable for GitHub Enterprise)
GITHUB_OAUTH_AUTHORIZE_URL=https://github.com/login/oauth/authorize
GITHUB_OAUTH_TOKEN_URL=https://github.com/login/oauth/access_token
GITHUB_BASE_URL=https://github.com

# -----------------------------------------------------------------------------  
# JWT Token Configuration (REQUIRED)
# -----------------------------------------------------------------------------
# RSA key pair for JWT token signing and verification
# Generate keys with: openssl genrsa -out jwt-private-key.pem 2048
#                    openssl rsa -in jwt-private-key.pem -pubout -out jwt-public-key.pem

JWT_PRIVATE_KEY_PATH=../keys/jwt-private-key.pem
JWT_PUBLIC_KEY_PATH=../keys/jwt-public-key.pem
JWT_ALGORITHM=RS256
JWT_ISSUER=tarsy
USER_TOKEN_EXPIRY_HOURS=168

# OAuth state management
OAUTH_STATE_TTL_MINUTES=10

# -----------------------------------------------------------------------------
# Frontend Configuration (REQUIRED for production)
# -----------------------------------------------------------------------------
# Frontend URL for OAuth redirects in production mode
# Dev mode allows any localhost port automatically
FRONTEND_URL=http://localhost:5173

# Backend URL for OAuth callbacks
BACKEND_URL=http://localhost:8000

# -----------------------------------------------------------------------------
# Cookie Configuration (OPTIONAL)
# -----------------------------------------------------------------------------  
# Cross-subdomain cookie sharing (e.g., '.example.com' for app.example.com + api.example.com)
# WARNING: Setting cookie_domain=".example.com" makes cookies available to ALL subdomains
# Only use this when you control all subdomains and need cross-subdomain authentication
# Leave blank/commented for single-domain deployments
# COOKIE_DOMAIN=.example.com

# -----------------------------------------------------------------------------
# Development Mode (OPTIONAL)
# -----------------------------------------------------------------------------
# Enable development mode to bypass GitHub OAuth with hardcoded test user
# WARNING: NEVER enable in production - uses insecure authentication!
DEV_MODE=false

# Application environment (development, staging, production)
ENVIRONMENT=development

# =============================================================================
# MCP Server Template Variables
# =============================================================================
# These variables are used by MCP server configurations with ${VARIABLE_NAME} syntax
# Set the ones you need based on your configured MCP servers
#
# NOTE: Only KUBECONFIG has a built-in default. All other template variables 
# must be explicitly set in this file or your environment.

# Kubernetes Configuration
# Path to your kubeconfig file for the built-in kubernetes-server
# Default: Expanded absolute path (e.g., /home/user/.kube/config) - tilde is automatically expanded
# When setting custom paths, always use absolute paths - tilde expansion only works for built-in defaults
# KUBECONFIG=/path/to/your/kubeconfig

# Monitoring Configuration (examples - no defaults, must be set explicitly)
PROMETHEUS_URL=http://your-prometheus:9090
GRAFANA_URL=http://your-grafana:3000

# Custom MCP Server Tokens/Credentials (examples from agents.yaml.example)
# These must be set explicitly
SECURITY_SERVER_TOKEN=your_security_server_token_here
GRAFANA_TOKEN=your_grafana_api_token_here

# AWS Configuration (if using aws-server)
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_DEFAULT_REGION=us-west-2

# ArgoCD Configuration (for future argocd-server)
# ARGOCD_SERVER=your-argocd-server-url
# ARGOCD_TOKEN=your_argocd_auth_token

# =============================================================================
# Database Configuration
# =============================================================================
# History database URL - automatically defaults based on environment:
# - Tests: sqlite:///:memory: (in-memory, isolated)
# - Dev/Prod: sqlite:///history.db (persistent file)
# Override if you need custom database configuration
# HISTORY_DATABASE_URL=sqlite:///custom_history.db
# HISTORY_DATABASE_URL=postgresql://user:pass@localhost:5432/tarsy_history

# Enable/disable history capture (default: true)
# HISTORY_ENABLED=true

# History retention in days (default: 90)
# HISTORY_RETENTION_DAYS=90

# =============================================================================
# Multi-Layer Agent Architecture Configuration
# =============================================================================
# The agent registry and MCP server registry are configured in settings.py
# with sensible defaults. You can override them here if needed.

# Agent Registry - Maps alert types to specialized agent classes
# Example override (JSON format):
# AGENT_REGISTRY='{"NamespaceTerminating": "KubernetesAgent", "ArgoCD Sync Failed": "ArgoCDAgent"}'

# MCP Server Registry - Single source of truth for all MCP server configurations
# Note: This replaces the old mcp_servers configuration
# Example override (JSON format):
# MCP_SERVER_REGISTRY='{"kubernetes-server": {"server_type": "kubernetes", "enabled": true, "connection_params": {"command": "npx", "args": ["-y", "@modelcontextprotocol/server-kubernetes@latest"]}, "instructions": "For Kubernetes operations..."}}'

# Configuration-Based Agents (EP-0006)
# Path to YAML file defining agents and MCP servers (default: ./config/agents.yaml)
# Copy config/agents.yaml.example to config/agents.yaml and customize as needed
# AGENT_CONFIG_PATH=./config/agents.yaml

# Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Server host and port configuration
HOST=0.0.0.0
PORT=8000

# =============================================================================
# CORS Configuration
# =============================================================================
# Allowed origins for CORS (comma-separated list)
# Include both dashboard (5173) and alert dev UI (3001) URLs for development
# For production, use your actual domain(s)
CORS_ORIGINS=http://localhost:3001,http://127.0.0.1:3001,http://localhost:5173,http://127.0.0.1:5173

# =============================================================================
# QUICK START INSTRUCTIONS
# =============================================================================
# 
# 1. Copy this file to .env:
#    cp env.template .env
#
# 2. Generate JWT RSA keys (REQUIRED for authentication):
#    mkdir -p ../keys
#    openssl genrsa -out ../keys/jwt-private-key.pem 2048
#    openssl rsa -in ../keys/jwt-private-key.pem -pubout -out ../keys/jwt-public-key.pem
#
# 3. Edit .env and set these REQUIRED variables:
#    - At least one LLM API key (GOOGLE_API_KEY, OPENAI_API_KEY, XAI_API_KEY, or ANTHROPIC_API_KEY)
#    - GITHUB_TOKEN for runbook access
#    - GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET for web authentication
#    - GITHUB_ORG for organization membership requirement
#    - For ultra-easy DEV setup: Set GOOGLE_API_KEY + DEV_MODE=true and you're ready to go!
#
# 4. Create GitHub OAuth App (for web authentication):
#    - Go to https://github.com/settings/applications/new
#    - Set Authorization callback URL to: http://localhost:8000/auth/callback
#    - Copy Client ID and Client Secret to .env
#
# 5. Optional: Set up Kubernetes MCP Server on localhost:8080
#
# 6. Start the backend:
#    uvicorn tarsy.main:app --reload --port 8000
#
# 7. Access authentication:
#    - Web login: http://localhost:8000/auth/login
#    - Generate service account token: make generate-service-token SERVICE_NAME=my-service
#
# =============================================================================

# =============================================================================
# Optional: Advanced Configuration
# =============================================================================

# LLM Model Configuration
# GEMINI_MODEL=gemini-2.5-pro
# OPENAI_MODEL=gpt-4
# GROK_MODEL=grok-3

# SSL Verification for LLM API calls
# WARNING: Only disable SSL verification if you're using internal proxies with self-signed certificates or during testing
# DISABLE_SSL_VERIFICATION=false

# Request Timeouts (seconds)
# REQUEST_TIMEOUT=30
# LLM_TIMEOUT=60
# MCP_TIMEOUT=30

# Processing Limits
# MAX_CONCURRENT_ALERTS=5
# MAX_RUNBOOK_SIZE_MB=10

# GitHub API Configuration
# GITHUB_API_URL=https://api.github.com
# GITHUB_RAW_URL=https://raw.githubusercontent.com

# WebSocket Configuration
# WS_PING_INTERVAL=20
# WS_PING_TIMEOUT=10
# WS_MAX_CONNECTIONS=100

# =============================================================================
# Development/Testing Settings
# =============================================================================

# Enable verbose debug logging
# DEBUG_MODE=false

# Use mock responses for testing without real services
# USE_MOCK_MCP=false
# USE_MOCK_LLM=false

# Force testing mode (automatically detected when running pytest)
# TESTING=true

# Cache Configuration
# RUNBOOK_CACHE_TTL=3600
# RUNBOOK_CACHE_DIR=/tmp/sre-runbooks
# ENABLE_RESPONSE_CACHE=true

# =============================================================================
# Production Settings
# =============================================================================

# Security
# SECRET_KEY=your-super-secret-key-for-production
# ALLOWED_HOSTS=your-domain.com,api.your-domain.com

# Database (optional - for persistent storage)
# DATABASE_URL=postgresql://user:password@localhost:5432/tarsy

# Redis (optional - for caching and task queues)  
# REDIS_URL=redis://localhost:6379/0

# SSL/TLS Configuration
# SSL_KEYFILE=/path/to/ssl/private.key
# SSL_CERTFILE=/path/to/ssl/certificate.crt

# Rate Limiting
# RATE_LIMIT_ENABLED=true
# RATE_LIMIT_PER_MINUTE=60
# RATE_LIMIT_BURST=10

# Monitoring and Metrics
# ENABLE_METRICS=true
# METRICS_PORT=9090
# HEALTH_CHECK_INTERVAL=30

# =============================================================================
# Example Test Values
# =============================================================================
# Use these for initial testing and development

# Example cluster URL (replace with your actual cluster)
# TEST_CLUSTER_URL=https://api.example-cluster.com:6443

# Example namespace
# TEST_NAMESPACE=kube-system

# Example alert message
# TEST_ALERT_MESSAGE=namespace is stuck in 'Terminating' phase

# Default test runbook
# TEST_RUNBOOK_URL=https://github.com/codeready-toolchain/sandbox-sre/blob/master/runbooks/namespace-terminating.md

# =============================================================================
# Environment-Specific Configuration
# =============================================================================
# You can create multiple environment files:
# - .env.development
# - .env.staging  
# - .env.production
# - .env.test (for manual test database override)
#
# Load specific environment with:
# uvicorn tarsy.main:app --env-file .env.production

# =============================================================================
# Troubleshooting
# =============================================================================
# 
# Common issues and solutions:
#
# 1. "LLM provider not available" error:
#    - Check that at least one API key is set correctly
#    - Verify the API key has sufficient quota/credits
#    - Test the API key with a simple request
#
# 2. "Failed to download runbook" error:
#    - Check GITHUB_TOKEN has correct permissions
#    - Verify the runbook URL is accessible
#    - Test with a public repository first
#
# 3. "MCP server not available" error:
#    - Check KUBERNETES_MCP_URL is correct
#    - Verify the MCP server is running and responding
#    - Use the mock server script for testing
#
# 4. Alert Dev UI connection issues:
#    - Check CORS_ORIGINS includes your alert dev UI URL
#    - Verify backend is running on the correct port
#    - Check browser developer console for CORS errors
#
# 5. Test database pollution:
#    - Tests automatically use in-memory databases (sqlite:///:memory:)
#    - If you see shared database issues, check that TESTING=true during tests
#    - Clean up any *.db files in the backend directory if needed
#
# 6. Authentication issues (EP-0017):
#    - "JWT private key not found": Generate keys with openssl commands above
#    - "Invalid or expired OAuth state": Check GITHUB_CLIENT_ID/SECRET are correct
#    - "User not member of organization": Verify GITHUB_ORG matches user's org membership
#    - "GitHub OAuth app callback mismatch": Ensure callback URL matches BACKEND_URL/auth/callback
#    - "DEV_MODE cannot be enabled in production": Check ENVIRONMENT setting
#    - "Authentication required" API errors: Provide Authorization: Bearer <token> header
#    - Login redirects to wrong frontend: Check FRONTEND_URL or use redirect_url parameter
#    - Cookies not working: Check domain settings and HTTPS in production

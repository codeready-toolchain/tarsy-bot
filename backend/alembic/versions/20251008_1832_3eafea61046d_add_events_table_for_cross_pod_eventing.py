"""add events table for cross-pod eventing

Revision ID: 3eafea61046d
Revises: 7c617b3e7c2c
Create Date: 2025-10-08 18:32:14.030918

Note: This migration is database-agnostic and handles differences between PostgreSQL and SQLite:
- PostgreSQL: Uses BIGINT for id, NOW() for timestamp
- SQLite: Uses INTEGER for id (required for autoincrement), CURRENT_TIMESTAMP for timestamp
"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "3eafea61046d"
down_revision: Union[str, Sequence[str], None] = "7c617b3e7c2c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Database-agnostic configuration
    connection = op.get_bind()
    dialect_name = connection.dialect.name
    
    # Check if table already exists (for idempotency)
    from sqlalchemy import inspect
    inspector = inspect(connection)
    existing_tables = inspector.get_table_names()
    
    if "events" not in existing_tables:
        # PostgreSQL uses BIGINT with autoincrement
        # SQLite requires INTEGER for autoincrement to work properly
        if dialect_name == 'postgresql':
            id_type = sa.BigInteger()
            timestamp_default = sa.text("NOW()")
        else:  # SQLite
            id_type = sa.Integer()  # SQLite needs INTEGER for autoincrement
            timestamp_default = sa.text("(CURRENT_TIMESTAMP)")
        
        op.create_table(
            "events",
            sa.Column("id", id_type, autoincrement=True, nullable=False),
            sa.Column(
                "channel", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False
            ),
            sa.Column("payload", sa.JSON(), nullable=True),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=timestamp_default,
                nullable=False,
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("events", schema=None) as batch_op:
            batch_op.create_index("idx_events_channel_id", ["channel", "id"], unique=False)
            batch_op.create_index("idx_events_created_at", ["created_at"], unique=False)
            batch_op.create_index(
                batch_op.f("ix_events_channel"), ["channel"], unique=False
            )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if table exists before dropping (for idempotency)
    connection = op.get_bind()
    from sqlalchemy import inspect
    inspector = inspect(connection)
    existing_tables = inspector.get_table_names()
    
    if "events" in existing_tables:
        with op.batch_alter_table("events", schema=None) as batch_op:
            batch_op.drop_index(batch_op.f("ix_events_channel"))
            batch_op.drop_index("idx_events_created_at")
            batch_op.drop_index("idx_events_channel_id")

        op.drop_table("events")
    # ### end Alembic commands ###

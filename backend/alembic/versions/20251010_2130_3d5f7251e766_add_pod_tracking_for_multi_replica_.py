"""add pod tracking for multi-replica support

Revision ID: 3d5f7251e766
Revises: 9d8fd988188d
Create Date: 2025-10-10 21:30:21.592898

Adds pod_id and last_interaction_at fields to support multi-replica
Kubernetes deployments with session cleanup and orphan detection (EP-0024).
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '3d5f7251e766'
down_revision: Union[str, Sequence[str], None] = '9d8fd988188d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Add pod tracking columns for multi-replica support."""
    from sqlalchemy import inspect
    
    # Get connection and inspector
    conn = op.get_bind()
    inspector = inspect(conn)
    
    # Get existing columns
    existing_columns = {col['name'] for col in inspector.get_columns('alert_sessions')}
    
    # Add new columns only if they don't exist (idempotent migration)
    with op.batch_alter_table('alert_sessions', schema=None) as batch_op:
        if 'pod_id' not in existing_columns:
            batch_op.add_column(sa.Column('pod_id', sa.String(255), nullable=True))
        if 'last_interaction_at' not in existing_columns:
            batch_op.add_column(sa.Column('last_interaction_at', sa.BIGINT(), nullable=True))
        
        # Check if index exists before creating
        existing_indexes = {idx['name'] for idx in inspector.get_indexes('alert_sessions')}
        if 'ix_alert_sessions_status_last_interaction' not in existing_indexes:
            batch_op.create_index(
                'ix_alert_sessions_status_last_interaction',
                ['status', 'last_interaction_at'],
                unique=False
            )
    
    # Backfill pod_id for existing rows (historical sessions get "unknown")
    op.execute("UPDATE alert_sessions SET pod_id = 'unknown' WHERE pod_id IS NULL")
    
    # Backfill last_interaction_at for existing rows (use started_at_us as fallback)
    op.execute(
        "UPDATE alert_sessions SET last_interaction_at = started_at_us "
        "WHERE last_interaction_at IS NULL"
    )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('alert_sessions', schema=None) as batch_op:
        batch_op.drop_index('ix_alert_sessions_status_last_interaction')
        batch_op.drop_column('last_interaction_at')
        batch_op.drop_column('pod_id')

    # ### end Alembic commands ###

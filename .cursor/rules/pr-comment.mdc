---
description: Addressing a PR comment
globs:
alwaysApply: false
---

# Pull Request Review Comment - Context

**The user's message contains a Pull Request review comment that needs to be addressed.**

Treat the user's input as the reviewer's feedback. Your task is to analyze this comment critically and respond appropriately.

---

# How to Address the PR Comment

Follow this systematic approach:

## 1. Identify the Context

**First, determine what code the comment refers to:**
- Read the files mentioned or implied by the comment
- Use recently viewed files, or file context to identify relevant files
- Understand the current implementation before proceeding

## 2. Analysis Phase

**Do not blindly implement the suggestion.** First, analyze the comment by:

- **Understanding the reviewer's intent:** What is the concern, suggestion, or question?
- **Examining the code in question:** Read the relevant files and surrounding context
- **Validating the comment:** The reviewer may be mistaken or lack full context - think critically
- **Assessing the impact:** Consider how any proposed change affects the broader codebase
- **Checking project standards:** Ensure alignment with existing conventions and rules

### Critical: Understand Full Implications

**A suggestion may be correct but incomplete.** Always consider:

- **Ripple effects:** Changes in one area often require updates elsewhere
- **Cross-component impact:** Backend changes may require frontend updates, and vice versa
- **API contracts:** Changing interfaces affects all consumers
- **Database schema:** Model changes require migration scripts and all affected queries
- **Tests:** Implementation changes require corresponding test updates
- **Documentation:** Code changes may need doc updates

**If the suggestion requires changes beyond what's explicitly mentioned, make those changes too.** A partial implementation is worse than no implementation.

## 3. Response Strategy

### If the comment is valid:
- **Acknowledge the feedback** positively
- **Implement the suggested fix** or improvement
- **Explain your changes** briefly if they differ from the suggestion
- **Add tests** if the change affects functionality
- **Update documentation** if relevant

### If the comment is unclear:
- **Ask for clarification** before making changes
- **Explain your current understanding** and why it might be ambiguous
- **Suggest alternatives** if you have ideas about what they meant

### If you disagree with the comment:
- **Respectfully explain your reasoning** with technical justification
- **Provide context** the reviewer might have missed
- **Suggest alternatives** if there's a middle ground
- **Be open to discussion** - you might be missing something too

## 4. Implementation Guidelines

- **Make comprehensive changes:** Modify everything necessary to fully address the comment, including related components
- **Think across boundaries:** If backend changes, check if frontend needs updates; if models change, update all consumers
- **Maintain consistency:** Follow existing code style and patterns across all modified files
- **Preserve functionality:** Don't introduce new bugs while fixing issues
- **Consider edge cases:** Think beyond the immediate change
- **Test coverage:** When making changes, prioritize test updates:
  - **First choice:** Adjust existing tests to cover the change (better than adding new tests)
  - **Second choice:** Add new tests if existing ones don't cover the changed behavior
  - **Always:** Ensure all tests pass after your changes
  - **When to skip:** Only skip test updates if it's too tricky or doesn't make sense for the specific change
  - **Preferred method:** Use `cd backend && make test-unit`, `make test-integration`, or `make test-e2e` to run tests properly
- **Check for linter errors:** Fix any new warnings or errors introduced in all modified files

## 5. Final Checklist

Before considering the comment addressed:
- [ ] Have I fully understood the comment's intent?
- [ ] Have I analyzed the relevant code thoroughly?
- [ ] Is my response or implementation technically sound?
- [ ] Have I identified ALL affected components (backend, frontend, database, tests, docs)?
- [ ] Have I made changes in all necessary areas, not just the directly mentioned code?
- [ ] Are tests passing and linter errors resolved across all modified files?
- [ ] Have I communicated my approach and rationale clearly to the user?
